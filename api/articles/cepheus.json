{"title":"小米9基于PixelExperience源码编译步骤","uid":"3905365a3662483b3f829d38aa0e4f41","slug":"cepheus","date":"2022-04-28T15:05:47.000Z","updated":"2022-06-15T07:44:45.160Z","comments":true,"path":"api/articles/cepheus.json","cover":null,"content":"<h1 id=\"Pixel-Experience\"><a href=\"#Pixel-Experience\" class=\"headerlink\" title=\"Pixel Experience\"></a>Pixel Experience</h1><h3 id=\"Sync\"><a href=\"#Sync\" class=\"headerlink\" title=\"Sync\"></a>Sync</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\n<span class=\"token comment\"># Initialize local repository</span>\nrepo init -u https://github.com/PixelExperience/manifest -b twelve\n\n<span class=\"token comment\"># Sync</span>\nrepo <span class=\"token function\">sync</span> -c -j<span class=\"token variable\"><span class=\"token variable\">$(</span>nproc --all<span class=\"token variable\">)</span></span> --force-sync --no-clone-bundle --no-tags<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Build\"><a href=\"#Build\" class=\"headerlink\" title=\"Build\"></a>Build</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\n<span class=\"token comment\"># Set up environment</span>\n$ <span class=\"token builtin class-name\">.</span> build/envsetup.sh\n\n<span class=\"token comment\"># Choose a target</span>\n$ lunch aosp_cepheus-userdebug\n\n$ lunch aosp_cepheus-user\n\n<span class=\"token comment\"># Build the code</span>\n$ mka bacon -j4<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Turn-on-caching-to-speed-up-build\"><a href=\"#Turn-on-caching-to-speed-up-build\" class=\"headerlink\" title=\"Turn on caching to speed up build\"></a>Turn on caching to speed up build</h3><p>Make use of ccache if you want to speed up subsequent builds by running:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">export USE_CCACHE=1\nexport CCACHE_EXEC=/usr/bin/ccache<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>and adding that line to your ~/.bashrc file. Then, specify the maximum amount of disk space you want ccache to use by typing this:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ccache -M 50G<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>where 50G corresponds to 50GB of cache. This needs to be run once. Anywhere from 25GB-100GB will result in very noticeably increased build speeds (for instance, a typical 1hr build time can be reduced to 20min). If you’re only building for one device, 25GB-50GB is fine. If you plan to build for several devices that do not share the same kernel source, aim for 75GB-100GB. This space will be permanently occupied on your drive, so take this into consideration.</p>\n<p>You can also enable the optional ccache compression. While this may involve a slight performance slowdown, it increases the number of files that fit in the cache. To enable it, run:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ccache -o compression=true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<h3 id=\"Start-the-build\"><a href=\"#Start-the-build\" class=\"headerlink\" title=\"Start the build\"></a>Start the build</h3><p>Time to start building! Now, type:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">croot\nmka bacon -j$(nproc --all)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"Install-the-build\"><a href=\"#Install-the-build\" class=\"headerlink\" title=\"Install the build\"></a>Install the build</h3><p>Assuming the build completed without errors (it will be obvious when it finishes), type the following in the terminal window the build ran in:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cd $OUT<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<p>There you’ll find all the files that were created. The two files of more interest are:</p>\n<p>recovery.img, which is the PixelExperience recovery image.</p>\n<p>A zip file whose name starts with ‘PixelExperience_’, which is the PixelExperience installer package.</p>\n<p>Success! So… what’s next?<br>You’ve done it! Welcome to the elite club of self-builders. You’ve built your operating system from scratch, from the ground up. You are the master/mistress of your domain… and hopefully you’ve learned a bit on the way and had some fun too.</p>\n<h3 id=\"Submitting-Patches\"><a href=\"#Submitting-Patches\" class=\"headerlink\" title=\"Submitting Patches\"></a>Submitting Patches</h3><p>Patches are always welcome! Please submit your patches to our Gerrit.</p>\n<p><a href=\"https://wiki.pixelexperience.org/help/submit-patch/\">Gerrit push guide</a></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\nunzip platform-tools-latest-linux.zip -d ~\n\n# Now you have to add adb and fastboot to your PATH. Open ~/.profile and add the following:\n# add Android SDK platform tools to path\nif [ -d \"$HOME/platform-tools\" ] ; then\n    PATH=\"$HOME/platform-tools:$PATH\"\nfi\n\ncurl https://storage.googleapis.com/git-repo-downloads/repo &gt; /root/code/twelve/repo\nchmod a+x /root/code/twelve/repo\ncurl https://storage.googleapis.com/git-repo-downloads/repo &gt; /media/psf/aosp/twelve/repo\nchmod a+x /media/psf/aosp/twelve/repo\n\n./repo init -u https://github.com/PixelExperience/manifest -b twelve\n\nrepo init -u https://github.com/PixelExperience/manifest -b twelve\n\n\ngit config --global user.email \"xiaoli.xia@uuxiclife.cn\"\ngit config --global user.name \"uuxia\"\n\n./repo sync -c -j$(nproc --all) --force-sync --no-clone-bundle --no-tags\n\n# Running configuration script:\ncd ~/\ngit clone https://github.com/akhilnarang/scripts\ncd scripts\n./setup/android_build_env.sh\n\n\n./repo sync -c -j$(nproc --all) --force-sync --no-clone-bundle --no-tags\n\nsource build/envsetup.sh\nlunch aosp_cepheus-userdebug\n\nexport USE_CCACHE=1\nexport CCACHE_EXEC=/usr/bin/ccache\n\n# and adding that line to your ~/.bashrc file. Then, specify the maximum amount of disk space you want ccache to use by typing this:\nccache -M 50G\n\nccache -o compression=true\n\ncroot\nmka bacon -j$(nproc --all)\n\n\nexport http_proxy=http://127.0.0.1:1087\nexport https_proxy=http://127.0.0.1:1087\ngit config --global http.proxy http://127.0.0.1:1087\ngit config --global https.proxy http://127.0.0.1:1087\ngit config --global core.gitproxy http://127.0.0.1:1087\n\n\nexport http_proxy=http://127.0.0.1:1080\nexport https_proxy=http://127.0.0.1:1080\ngit config --global http.proxy http://127.0.0.1:1080\ngit config --global https.proxy http://127.0.0.1:1080\ngit config --global core.gitproxy http://127.0.0.1:1080\n\ngit config --global --get http.proxy\ngit config --global --get https.proxy\ngit config --global --get core.gitproxy\n\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\ngit config --global --unset core.gitproxy\n\n\nhttps://mirrors.tuna.tsinghua.edu.cn/git/AOSP/\n\n\nhttps://android.googlesource.com\n\nsudo chown -R root:root /root/cepheus\n\n\n\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","text":"Pixel ExperienceSync # Initialize local repository repo init -u https://github.com/PixelExperience/manifest -b twelve # Sync repo sync -c -j...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"AOSP","slug":"AOSP","count":1,"path":"api/categories/AOSP.json"},{"name":"小米9","slug":"小米9","count":2,"path":"api/categories/小米9.json"}],"tags":[{"name":"cepheus","slug":"cepheus","count":2,"path":"api/tags/cepheus.json"},{"name":"proxy","slug":"proxy","count":3,"path":"api/tags/proxy.json"},{"name":"android","slug":"android","count":4,"path":"api/tags/android.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Pixel-Experience\"><span class=\"toc-text\">Pixel Experience</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Sync\"><span class=\"toc-text\">Sync</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Build\"><span class=\"toc-text\">Build</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Turn-on-caching-to-speed-up-build\"><span class=\"toc-text\">Turn on caching to speed up build</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Start-the-build\"><span class=\"toc-text\">Start the build</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Install-the-build\"><span class=\"toc-text\">Install the build</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Submitting-Patches\"><span class=\"toc-text\">Submitting Patches</span></a></li></ol></li></ol></li></ol>","author":{"name":"uuxia","slug":"blog-author","avatar":"/medias/avatar.jpg","link":"/","description":"一位正在重塑知识的技术人 <br /> @ <b>欢迎光临!</b>","socials":{"github":"https://github.com/xxl6097","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"baidu":{"icon":"/img/baidu.jpg","link":"https://www.baidu.com/my/index"}}}},"mapped":true,"prev_post":{"title":"基于Linux(centos/ubuntu)搭建树莓派C/C++程序编译环境","uid":"d11ddb0019b506bf600e2b0e7096fce5","slug":"raspberry-build-env","date":"2022-06-15T10:01:41.000Z","updated":"2022-06-15T10:11:15.780Z","comments":true,"path":"api/articles/raspberry-build-env.json","cover":null,"text":"记录在Linux系统下搭建树莓派C/C++程序环境搭建的过程。 一、安装gcc/g++ yum install gcc-c++ 二、 安装CMake 下载文件到本地：wget https://github.com/Kitware/CMake/releases/download/v...","link":"","photos":[],"count_time":{"symbolsCount":603,"symbolsTime":"1 mins."},"categories":[{"name":"C/C++","slug":"C-C","count":1,"path":"api/categories/C-C.json"},{"name":"树莓派","slug":"树莓派","count":1,"path":"api/categories/树莓派.json"}],"tags":[{"name":"linux","slug":"linux","count":1,"path":"api/tags/linux.json"},{"name":"C/C++","slug":"C-C","count":1,"path":"api/tags/C-C.json"},{"name":"树莓派","slug":"树莓派","count":1,"path":"api/tags/树莓派.json"}],"author":{"name":"uuxia","slug":"blog-author","avatar":"/medias/avatar.jpg","link":"/","description":"一位正在重塑知识的技术人 <br /> @ <b>欢迎光临!</b>","socials":{"github":"https://github.com/xxl6097","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"baidu":{"icon":"/img/baidu.jpg","link":"https://www.baidu.com/my/index"}}}}},"next_post":{"title":"terminal代理设置","uid":"d99069053d84cdc5ed107cbb8312c192","slug":"proxysetting","date":"2022-04-28T14:54:33.000Z","updated":"2022-06-15T07:43:17.228Z","comments":true,"path":"api/articles/proxysetting.json","cover":null,"text":" 8a45f6bad0c5eda31f44591d6b22cf7588611db6740aaf37b60e55b90bec518bc1eb700345aa787c7ef1afa6c70569b4348629e0544655146d9e90c01e723f592670b5c271f...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"proxy","slug":"proxy","count":2,"path":"api/categories/proxy.json"}],"tags":[{"name":"proxy","slug":"proxy","count":3,"path":"api/tags/proxy.json"},{"name":"git","slug":"git","count":2,"path":"api/tags/git.json"},{"name":"ubuntu","slug":"ubuntu","count":1,"path":"api/tags/ubuntu.json"}],"author":{"name":"uuxia","slug":"blog-author","avatar":"/medias/avatar.jpg","link":"/","description":"一位正在重塑知识的技术人 <br /> @ <b>欢迎光临!</b>","socials":{"github":"https://github.com/xxl6097","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"baidu":{"icon":"/img/baidu.jpg","link":"https://www.baidu.com/my/index"}}}}}}