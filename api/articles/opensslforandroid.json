{"title":"Android 编译 openssl 的注意事项","uid":"89bb463d3273af6b76496d142694c4e1","slug":"opensslforandroid","date":"2022-07-21T02:01:47.000Z","updated":"2022-07-21T02:03:11.740Z","comments":true,"path":"api/articles/opensslforandroid.json","cover":null,"content":"<span id=\"more\"></span>\n\n\n<p>以下载链接<a href=\"https://www.openssl.org/source/openssl-1.1.1o.tar.gz%E4%B8%BA%E4%BE%8B\">https://www.openssl.org/source/openssl-1.1.1o.tar.gz为例</a><br><br>下载解压之后，查看根目录的 NOTES.ANDROID，其中有</p>\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">\nexport ANDROID_NDK_HOME=/home/whoever/Android/android-sdk/ndk/20.0.5594570\nPATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin:$ANDROID_NDK_HOME/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin:$PATH\n./Configure android-arm64 -D__ANDROID_API__=29\nmake\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里就是最直接的编译方式了。但是这样编译之后，会有一个坑<br></p>\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">\nlrwxrwxrwx  1 ubuntu ubuntu      16 Jun  9 21:23 libcrypto.so -&gt; libcrypto.so.1.1\n-rwxrwxr-x  1 ubuntu ubuntu 2754216 Jun  9 21:23 libcrypto.so.1.1\nlrwxrwxrwx  1 ubuntu ubuntu      13 Jun  9 21:23 libssl.so -&gt; libssl.so.1.1\n-rwxrwxr-x  1 ubuntu ubuntu  596600 Jun  9 21:23 libssl.so.1.1\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>编译时尝试链接 libssl.so ，实际上会链接到 libssl.so.1.1 ，但是当你尝试将 libssl.so.1.1 集成到 Android studio 工程内时，会发现 libssl.so.1.1 这种命名格式so，Android studio 是不会自动将其打包到 apk 内的，即使将 libssl.so.1.1 改名为 libssl.so 可以集成到 apk ，app运行时仍然会去找 libssl.so.1.1。因为 so 内部有其文件名信息</p>\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">\n$objdump -p libssl.so | grep SONAME\n  SONAME               libssl.so.1.1\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>对于Android来说，我们更希望，编译之后，so 本身名字就叫 libssl.so。<br>具体做法是解压 openssl-1.1.1o.tar.gz 之后，修改 15-android.conf<br>大概 193 行</p>\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">\nmy %targets = (\n    \"android\" =&gt; {\n        inherit_from     =&gt; [ \"linux-generic32\" ],\n        template         =&gt; 1,\n        ################################################################\n        # Special note about -pie. The underlying reason is that\n        # Lollipop refuses to run non-PIE. But what about older systems\n        # and NDKs? -fPIC was never problem, so the only concern is -pie.\n        # Older toolchains, e.g. r4, appear to handle it and binaries\n        # turn out mostly functional. \"Mostly\" means that oldest\n        # Androids, such as Froyo, fail to handle executable, but newer\n        # systems are perfectly capable of executing binaries targeting\n        # Froyo. Keep in mind that in the nutshell Android builds are\n        # about JNI, i.e. shared libraries, not applications.\n        cflags           =&gt; add(sub { android_ndk()-&gt;{cflags} }),\n        cppflags         =&gt; add(sub { android_ndk()-&gt;{cppflags} }),\n        cxxflags         =&gt; add(sub { android_ndk()-&gt;{cflags} }),\n        bn_ops           =&gt; sub { android_ndk()-&gt;{bn_ops} },\n        bin_cflags       =&gt; \"-pie\",\n        enable           =&gt; [ ],\n        shared_extension =&gt; \".so\",  ### 这一行是新加的\n    },\n    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这样可以编译出来不带版本后缀的 libssl.so 和 libcrypto.so</p>\n<p>可以参考下边的懒人脚本来自行编译</p>\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">\n#!/bin/bash\n\nfunction buildopenssl()\n{\n    androidarch=$1\n    toolchain=$2\n    if [ ! -f openssl-1.1.1o.tar.gz ]; then\n        wget https://www.openssl.org/source/openssl-1.1.1o.tar.gz\n    fi\n    if [ !-d openssl-1.1.1o ]; then\n        tar -xf openssl-1.1.1o.tar.gz\n    fi\n    if [ -z $ANDROID_NDK_HOME ]; then\n        echo \"missing ANDROID_NDK_HOME\"\n        exit\n    fi\n    pushd openssl-1.1.1o\n    PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin:$ANDROID_NDK_HOME/toolchains/${toolchain}-linux-androideabi-4.9/prebuilt/linux-x86_64/bin:$PATH\n    ./Configure android-$androidarch -D__ANDROID_API__=26\n    make clean\n    make\n    popd\n}\n\nbuildopenssl arm64 aarch64\n#buildopenssl arm arm\n#buildopenssl x86 x86\n#buildopenssl x86_64 x86_64\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用时，将 NDK_HOME传入，例如，脚本保存为 build.sh，则执行命令</p>\n<pre class=\"line-numbers language-asm\" data-language=\"asm\"><code class=\"language-asm\">ANDROID_NDK_HOME=/home/whoever/android-ndk-r21e ./build_android_openssl.sh\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>想为 Android (arm/x86/x86_64)编译时，修改脚本末尾的 buildopenssl 注释</p>\n<p><a href=\"https://www.cnblogs.com/SupperMary/p/16361303.html?share_token=D86811DE-FA19-49BF-A4AB-B50D1D50C467&amp;tt_from=copy_link&amp;utm_source=copy_link&amp;utm_medium=toutiao_ios&amp;utm_campaign=client_share\">友情链接</a></p>\n","text":" 以下载链接https://www.openssl.org/source/openssl-1.1.1o.tar.gz为例下载解压之后，查看根目录的 NOTES.ANDROID，其中有 export ANDROID_NDK_HOME=/home/whoever/Android/an...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"ndk","slug":"ndk","count":1,"path":"api/categories/ndk.json"},{"name":"openssl","slug":"openssl","count":1,"path":"api/categories/openssl.json"}],"tags":[{"name":"ndk","slug":"ndk","count":2,"path":"api/tags/ndk.json"},{"name":"Android","slug":"Android","count":2,"path":"api/tags/Android.json"},{"name":"openssl","slug":"openssl","count":1,"path":"api/tags/openssl.json"}],"toc":"","author":{"name":"uuxia","slug":"blog-author","avatar":"/medias/avatar.jpg","link":"/","description":"一位正在重塑知识的技术人 <br /> @ <b>欢迎光临</b>","socials":{"github":"https://github.com/xxl6097","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"小米9刷 PixelExperience ROM教程","uid":"81b909122b31a9659fd246d917b88723","slug":"cepheus-lock-rom","date":"2022-10-13T05:16:07.000Z","updated":"2022-10-13T08:48:15.538Z","comments":true,"path":"api/articles/cepheus-lock-rom.json","cover":null,"text":"小米9刷入官方rom 小米9解锁 确保手机插入了一张SIM卡，并登陆小米账号，并断开Wi-Fi连接; 开启开发者调试模式，Settings &gt; About Phone， 连续点击 MIUI Version 5次； 绑定设备到小米账号，Settings &gt; Additi...","link":"","photos":[],"count_time":{"symbolsCount":792,"symbolsTime":"1 mins."},"categories":[{"name":"PixelExperience","slug":"PixelExperience","count":1,"path":"api/categories/PixelExperience.json"},{"name":"小米9","slug":"小米9","count":2,"path":"api/categories/小米9.json"}],"tags":[{"name":"cepheus","slug":"cepheus","count":2,"path":"api/tags/cepheus.json"},{"name":"PixelExperience","slug":"PixelExperience","count":1,"path":"api/tags/PixelExperience.json"},{"name":"刷机","slug":"刷机","count":1,"path":"api/tags/刷机.json"},{"name":"Recovery","slug":"Recovery","count":1,"path":"api/tags/Recovery.json"}],"author":{"name":"uuxia","slug":"blog-author","avatar":"/medias/avatar.jpg","link":"/","description":"一位正在重塑知识的技术人 <br /> @ <b>欢迎光临</b>","socials":{"github":"https://github.com/xxl6097","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"IoT接入文档","uid":"2de4bfcb70b5f8e779a2abe056882166","slug":"iot-used","date":"2022-07-19T11:42:09.000Z","updated":"2022-07-19T11:43:17.391Z","comments":true,"path":"api/articles/iot-used.json","cover":null,"text":"4.3 设备与平台通信接口4.3.1 注册接口描述：设备上电联网后，检测本地是没有登录信息和注册标志，设备需要到平台进行注册激活，注册地址固定 URL，且分为测试和正式服务器地址（域名或 IP、端口）。正式服务器地址（OPENHOST）：open.clife.cn测试服务器地址（...","link":"","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[{"name":"IoT","slug":"IoT","count":4,"path":"api/categories/IoT.json"},{"name":"mqtt","slug":"mqtt","count":1,"path":"api/categories/mqtt.json"}],"tags":[{"name":"Iot","slug":"Iot","count":1,"path":"api/tags/Iot.json"},{"name":"mqtt","slug":"mqtt","count":1,"path":"api/tags/mqtt.json"},{"name":"c++","slug":"c","count":1,"path":"api/tags/c.json"}],"author":{"name":"uuxia","slug":"blog-author","avatar":"/medias/avatar.jpg","link":"/","description":"一位正在重塑知识的技术人 <br /> @ <b>欢迎光临</b>","socials":{"github":"https://github.com/xxl6097","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}